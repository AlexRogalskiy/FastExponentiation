@page "/"
@using System.Globalization

<NumberInput @ref="@BaseInput" PlaceHolder="Type base here..." />
<NumberInput @ref="@ExponentInput" PlaceHolder="Type exponent here..." IntegerNumber="false" />
<br />
<button @onclick="Calculate">Calculate</button>
<br />

@Result

@code {
    public NumberInput BaseInput;
    public NumberInput ExponentInput;

    public double Result = 0;

    public void Calculate() {
        Result = FastMath.FastPower(BaseInput.Value, ExponentInput.Value);
    }
}

<br />

<NumberInput @ref="@ChartExpInput" DefaultValue="2" PlaceHolder="Type exponent for precision testing here..." />
<br />
<NumberInput @ref="@ChartMinInput" DefaultValue="0" PlaceHolder="Type minimum base for precision testing here..." />
<br />
<NumberInput @ref="@ChartMaxInput" DefaultValue="100" PlaceHolder="Type maximum base for precision testing here..." />
<br />
<button @onclick="ComparePrecision">Compare precision</button>

<RadzenChart>
    <RadzenLineSeries Smooth="false" Data="@RealValues" CategoryProperty="Base" ValueProperty="Value" Title="Real values" />
    <RadzenLineSeries Smooth="false" Data="@ApproximateValues" CategoryProperty="Base" ValueProperty="Value" Title="Approximate values" />
</RadzenChart>

@code {
    public const int DataCount = 200;
    NumberInput ChartExpInput;
    NumberInput ChartMinInput;
    NumberInput ChartMaxInput;

    public class DataItem {
        public double Value { get; set; }
        public double Base { get; set; }
    }

    public List<DataItem> RealValues = new List<DataItem>();
    public List<DataItem> ApproximateValues = new List<DataItem>();

    void ComparePrecision() {
        var exp = ChartExpInput.Value;
        var min = ChartMinInput.Value;
        var max = ChartMaxInput.Value;
        var step = Math.Abs(max - min) / (double)DataCount;

        RealValues = new List<DataItem>();
        ApproximateValues = new List<DataItem>();

        for(double v = ChartMinInput.Value; v <= ChartMaxInput.Value; v += step) {
            if(v == 0) {
                continue;
            }
            RealValues.Add(new DataItem { Base = v, Value = Math.Pow(v, exp) });
            ApproximateValues.Add(new DataItem { Base = v, Value = FastMath.FastPower(v, exp) });
        }
        Console.WriteLine("Done comparing precision for {0} numbers", RealValues.Count);
    }
}