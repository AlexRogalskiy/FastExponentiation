<h3>Wide precision comparison test <i>for a range of exponents</i></h3>

Parameters for wide precision test:
<div class="container" style="padding-left: 0px">
    <div class="myInput">
        Minimum exponent:
        <br />
        <NumberInput @ref="@MinExp" DefaultValue="-1" PlaceHolder="Type exponent here" />
    </div>
    <div class="myInput">
        Maximum exponent:
        <br />
        <NumberInput @ref="@MaxExp" DefaultValue="1" PlaceHolder="Type exponent here" />
    </div>
    <div class="myInput">
        Minimum base:
        <br />
        <NumberInput @ref="@MinBase" DefaultValue="1" PlaceHolder="Type minimum base here" />
    </div>
    <div class="myInput">
        Maximum base:
        <br />
        <NumberInput @ref="@MaxBase" DefaultValue="100" PlaceHolder="Type maximum base here" />
    </div>
    <div class="myInput">
        Exponent and base iterations:
        <br />
        <NumberInput @ref="@Iterations" DefaultValue="100" PlaceHolder="Type iterations count here" />
    </div>
</div>
<button @onclick="ComparePrecision">Compare precision</button>
<br />

<div class="container">
    @foreach(var measureResult in WideMeasureResults) {
        <WideMeasureResultDisplay WideMeasuresResult="@measureResult" />
        <br />
    }
</div>

@code {
    NumberInput MinExp;
    NumberInput MaxExp;
    NumberInput MinBase;
    NumberInput MaxBase;
    NumberInput Iterations;

    public List<WideMeasuresResult> WideMeasureResults = new List<WideMeasuresResult>();

    void ComparePrecision() {
        var minExp = MinExp.Value;
        var maxExp = MaxExp.Value;
        var minBase = MinBase.Value;
        var maxBase = MaxBase.Value;

        var expStep = Math.Max(0.075d, Math.Abs(maxExp - minExp) / Iterations.Value);
        var baseStep = Math.Max(0.01d, Math.Abs(maxBase - minBase) / Iterations.Value);

        var baselineFunction = Misc.PowerFunctionModels[Misc.BaselinePowerFunctionIndex].Function;
        WideMeasureResults = new List<WideMeasuresResult>();

        foreach(var powerFunctionModel in Misc.PowerFunctionModels) {
            var measureResult = new WideMeasuresResult(powerFunctionModel);

            var totalDifference = 0d;

            for(double b = minBase; b <= maxBase; b += baseStep) {
                for(double e = minExp; e <= maxExp; e += expStep) {
                    if(b == 0d) {
                        continue;
                    }

                    var baselineValue = baselineFunction(b, e);
                    var myValue = powerFunctionModel.Function(b, e);

                    if(double.IsNaN(baselineValue) || double.IsNaN(myValue)) {
                        continue;
                    }
                    var diff = Math.Abs(baselineValue / myValue);
                    if(double.IsNaN(diff) || !double.IsFinite(diff) || !double.IsFinite(baselineValue) || !double.IsFinite(myValue)) {
                        continue;
                    }
                    var percentageDiff = Misc.ToPercentage(diff);
                    if(percentageDiff >= measureResult.MaxError) {
                        measureResult.MaxErrorBase = b;
                        measureResult.MaxErrorExp = e;
                        measureResult.MaxError = percentageDiff;
                    }
                    totalDifference += diff;
                    measureResult.IterationsCount++;
                }
            }
            measureResult.AverageError = Misc.ToPercentage(totalDifference / measureResult.IterationsCount);
            WideMeasureResults.Add(measureResult);
        }
        Console.WriteLine("Done comparing wide precisions for {0} numbers", WideMeasureResults.Sum(x => x.DataItems.Count));
    }

    protected override void OnAfterRender(bool firstRender) {
        if(firstRender) {
            ComparePrecision();
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }
}
